
...desvantagens jdbc
Quais as principais desvantagens do JDBC, das quais a JPA foi criada para resolver?
r:

Utilizar o JDBC implica em escrever um código de difícil manutenção
Alternativa correta! Códigos que utilizam JDBC são mais verbosos e isso aumenta a dificuldade de manutenção

JDBC aumenta o acoplamento do código
Alternativa correta! O JDBC causa um acoplamento maior entre o código da aplicação e o banco de dados


JPA especificação


... != jpa 

Qual a diferença entre Hibernate e JPA?
r:
JPA é uma especificação e Hibernate é uma de suas implementações
Alternativa correta! JPA é a especificação enquanto o Hibernate é uma de suas implementações

...Persistence

Qual o objetivo da tag <persistence-unit> no arquivo persistence.xml?
r:
Agrupar as configurações de uma unidade de persistência, que representa um banco de dados utilizado pela aplicação
Alternativa correta! Esse é justamente o objetivo da tag <persistence-unit>


--> alterar pom e persistence.xml para configurar qual banco de dados usar

JPA por padrão considera o nome da tabela o mesmo da entidade

@Entity
@Table(name = "produtos")
public class Produto {


}

Mapeamento de uma entidade 

@Entity
@Table(name = "produtos")
public class Produto {
	
	private Long id;
	private String nome;
	@Column(name = "descricao") ex.
	private String descricao;
	private BigDecimal preco;
	
}



...Para cada classe adicionada, ela deve ser adicionada na persistence

	<persistence-unit name="loja" transaction-type="RESOURCE_LOCAL">
		
		<class>br.com.alura.loja.modelo.Produto</class>   <------------------------------------ hinernate adiciona automaticamente, mas outras JPAs podem não o fazê-la
		
		<properties>
            <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver" />
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/loja" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="" />
            
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />
		</properties>
		
		
		
	</persistence-unit>
</persistence>


 ...Qual a melhor definição de uma entidade JPA?
 r:

 É uma classe que faz o mapeamento de uma tabela do banco de dados
Alternativa correta! Uma entidade JPA funciona como um espelho de uma tabela no banco de dados



...commit 
Quando devemos iniciar e comitar uma transação ao persistir uma entidade?
r:

Ao realizar operações de escrita no banco de dados, como insert, update e delete
Alternativa correta! Operações de escrita exigem o uso de transações

ex:

		em.getTransaction().begin();
		em.persist(celular);
		em.getTransaction().commit();
		em.close();


persistence 

 <property name="hibernate.hbm2ddl.auto" value="update"/>


 ...anotações JPA 

 Quais tipos de atributos podemos mapear sem a necessidade de configurações adicionais via anotações da JPA?
 r:
 Os tipos primitivos, atributos do tipo String e algumas classes do Java, como LocalDate e BigDecimal
Alternativa correta! Esses tipos podem ser mapeados automaticamente, sem a necessidade de configurações adicionais


...Cardinalidade do relacionamento

Aprendemos a utilizar a anotação @ManyToOne para indicar a cardinalidade de um relacionamento. Qual 
a cardinalidade padrão assumida pela JPA, no caso de um atributo que representa um relacionamento 
não possuir anotações?

r:
É obrigatório adicionar alguma anotação de cardinalidade em todos os atributos que representam relacionamentos.
Alternativa correta! A JPA não assume uma cardinalidade padrão quando não anotamos um atributo

***

Nessa aula, você aprendeu:
Como escrever uma classe DAO utilizando a JPA;
Como mapear atributos do tipo Enum em uma entidade;
Como mapear um relacionamento entre entidades.


...Método merge JPA


Analise o seguinte trecho de código e indique qual o resultado esperado:

em.getTransaction().begin();
Produto produto = em.find(Produto.class, 1l);
produto.setDescricao(“Teste 1”);
em.flush();
produto.setDescricao(“Teste 2”);
em.merge(produto);
produto.setDescricao(“Teste 3”);
em.getTransaction().commit();
em.close();


r:
A entidade produto será atualizada no banco de dados com a descrição Teste 3
Alternativa correta! No código anterior o merge acabou sendo indiferente, pois a entidade já estava no estado Managed


...Removendo uma entidade em JPA

em.getTransaction().begin();
Produto produto = em.find(Produto.class, 1l);
produto.setDescricao(“Teste 1”);
em.flush();
em.clear();
em.remove(produto);
em.getTransaction().commit();
em.close();

r:

Uma exception será lançada ao tentar remover a entidade produto
Alternativa correta! A entidade produto estava no estado Detached ao ser removida, algo que a JPA não permite

***

Nessa aula, você aprendeu:
Como funciona o ciclo de vida de entidades JPA;
As transições de estados de uma entidade ao ser persistida;
As transições de estados de uma entidade ao ser atualizada;
As transições de estados de uma entidade ao ser removida.


...Carregando parte da entidade jpql

public BigDecimal buscarPrecoDoProdutoComNome(String nome) {
    String jpql = "SELECT p.preco FROM Produto p WHERE p.nome = :nome";
    return em.createQuery(jpql, Produto.class)
                .setParameter("nome", nome)
                .getSingleResult();
}


r:
A classe passada como parâmetro para o método createQuery está incorreta
Alternativa correta! O correto deveria ser BigDecimal.class e não Produto.class

JPA exige um constructor padrão default sem nenhum argumento. 

Cardinalidade = ManyToMany, OneToMany

...relacionamento bidirecional

Por qual motivo o parâmetro mappedBy deve ser utilizado na anotação @OneToMany?
r:
Para indicar que se trata de um relacionamento bidirecional
Alternativa correta! Sem esse parâmetro a JPA considera se tratar de outro relacionamento, assumindo que existe outra tabela de join

...Parâmetro cascade

Qual a utilidade do parâmetro cascade?

r:
Propagar as operações realizadas em uma entidade em seu relacionamento
Alternativa correta! O cascade cria um efeito cascata nas operações realizadas em uma entidade

***
Nessa aula, você aprendeu:
A mapear novas entidades na aplicação conforme a modelagem do banco de dados;
A mapear um relacionamento com cardinalidade muitos-para-muitos;
A mapear um relacionamento bidirecional;
Como persistir entidades que possuam relacionamentos bidirecionais.


...Vantagens do join fetch

Por qual motivo é interessante utilizar o recurso join fetch em uma consulta JPQL?
r:
Para carregar um relacionamento mapeado como LAZY
Alternativa correta! O join fetch permite escolher quais relacionamentos serão carregados em determinada consulta, ao invés de sempre os carregar

***

Nessa aula, você aprendeu:
Como funcionam as estratégias EAGER e LAZY, em consultas de entidades que possuem relacionamentos;
Por que a JPA pode lançar a exception LazyInitializationException em determinadas situações;
As boas práticas no carregamento de entidades com relacionamentos;
Como realizar consultas planejadas com o recurso join fetch.

...Consulta dinâmica

public List<Cliente> buscarClientes(String nome, LocalDate dataNascimento) {
    String jpql = "SELECT c FROM Cliente c WHERE ";
    if (nome != null && !nome.trim().isEmpty()) {
        jpql += "AND c.nome = :nome ";
    }
    if (dataNascimento != null) {
        jpql += " AND c.dataNascimento = :dataNascimento ";
    }
    TypedQuery<Cliente> query = em.createQuery(jpql, Cliente.class);
    if (nome != null && !nome.trim().isEmpty()) {
        query.setParameter("nome", nome);
    }
    if (dataNascimento != null) {
        query.setParameter("dataNascimento", dataNascimento);
    }
    return query.getResultList();
}

Uma exception será lançada, independente dos parâmetros informados
Alternativa correta! A querie contém um erro na cláusula where.
correto = 
WHERE 1=1
boolean positivo

...Desvantagem criteria API


Qual das seguintes opções é uma das desvantagens da Criteria API?

r:
Código mais complexo de entender e manter
Alternativa correta! A API de Criteria torna o código mais difícil de entender

...Herança entre entidades


Analise as seguintes entidades:

@Entity
public class Pessoa {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String email;


}
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public class PessoaFisica extends Pessoa {

    private String cpf;
    private LocalDate dataNascimento;


}
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
public class PessoaJuridica extends Pessoa {

    private String cnpj;
    private String inscricaoEstadual;

}

r:

A anotação de herança está na classe errada
Alternativa correta! A anotação @Inheritance deveria ser adicionada apenas na classe base

@Embeddable
para herdar em uma mesma tabela


...Utilizando chave composta




Considere o seguinte mapeamento:

@Entity
public class Usuario {

    @Embedded
    private UsuarioId id;


}

@Embeddable
public class UsuarioId implements Serializable {

    private static final long serialVersionUID = 1L;

    private String nome;
    private String cpf;

}

r:

O atributo id foi mapeado de maneira incorreta
Alternativa correta! O atributo id deveria ser anotado com @EmbeddedId ao invés de @Embedded

***
Nessa aula, você aprendeu:
A utilizar as anotações @Embeddable e @Embedded para organizar o código de uma entidade;
A realizar herança entre entidades com as estratégias SINGLE_TABLE e JOINED;
Como mapear uma chave composta com a anotação @EmbeddedId.