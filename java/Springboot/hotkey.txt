intelij

alt+ insert = criar classe

shift + shift = settings =  ctrl + alt + s

alt + enter = atalho create record/class
utilizar o https://start.spring.io/ para configurar

...Mapeando requisições com Spring Boot


Você está trabalhando no desenvolvimento de uma API Rest para uma aplicação de um e-commerce, utilizando o Spring Boot, e cria uma classe Controller da seguinte maneira:

@RequestMapping("/produtos")
public class ProdutoController {

    @GetMapping
    public String produtosEmEstoque() {
        return "Produtos em estoque...";
    }
}
Mas ao executar a aplicação e entrar no endereço http://localhost:8080/produtos, você recebe um erro 404 - Not Found. Por que esse erro ocorreu?

r:
A classe Controller não foi mapeada corretamente.
Para que o Spring reconheça a classe como um Controller, ela deve ser anotada com @Controller ou com @RestController.


***
Nessa aula, você aprendeu como:
Criar um projeto Spring Boot utilizando o site do Spring Initializr;
Importar o projeto no IntelliJ e executar uma aplicação Spring Boot pela classe contendo o método main;
Criar uma classe Controller e mapear uma URL nela utilizando as anotações @RestController e @RequestMapping;
Realizar uma requisição de teste no browser acessando a URL mapeada no Controller.

...CORS

CorsConfiguration


@Configuration
public class CorsConfiguration implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
            .allowedOrigins("http://localhost:3000")
            .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "TRACE", "CONNECT");
    }
}


DTO = DATA TRANSFER OBJECT = Para representar os dados que chegam e devolvem na API


...Request Body

Em uma classe Controller existe o seguinte método declarado:

@PostMapping
public void cadastrar(DadosCadastroProduto dados) {
    System.out.println(dados);
}
E nesse projeto foi criado também o DTO DadosCadastroProduto:

public record DadosCadastroProduto(String nome, String descricao, BigDecimal preco){}COPIAR CÓDIGO
Você dispara uma requisição POST, enviando no corpo dela o seguinte JSON:

{
    "preco" : 399.99,
    "descricao" : "Wireless. Cor: branca",
    "nome" : "Fone de ouvido"
}
Mas, ao verificar o console da IDE, percebe que os dados estão chegando todos como null.

Escolha a alternativa CORRETA que indica o porquê os dados estão retornado como nulos:

r:


Faltou anotar o parâmetro dados, recebido no método cadastrar do Controller, com @RequestBody.
Sem essa anotação o Spring não vai ler o corpo da requisição e mapear os campos dele para o DTO recebido como parâmetro.



***

Nessa aula, você aprendeu como:
Mapear requisições POST em uma classe Controller;
Enviar requisições POST para a API utilizando o Insomnia;
Enviar dados para API no formato JSON;
Utilizar a anotação @RequestBody para receber os dados do corpo da requisição em um parâmetro no Controller;
Utilizar o padrão DTO (Data Transfer Object), via Java Records, para representar os dados recebidos em uma requisição POST.

...caso nao encontre 

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


...Mudança do MySQL no Maven


Houve uma mudança no Maven em relação à dependência do MySQL, na qual o group-id e o artifact-id foram alterados.

A partir de agora, você deve adicionar a dependência do driver MySQL no arquivo pom.xml da seguinte maneira:

<dependency>
    <groupId>com.mysql</groupId>
    <artifactId>mysql-connector-j</artifactId>
    <scope>runtime</scope>
</dependency>
Além disso, pode acontecer do Spring Boot não encontrar automaticamente o driver do MySQL no projeto, sendo recomendado que você adicione mais uma propriedade no arquivo application.properties:

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

...YAML
.yml



YAML Configuration
YAML é um outro formato bastante utilizado para definir dados de configuração hierárquica, como é feito no Spring Boot.

Pegando o mesmo exemplo do nosso arquivo application.properties, podemos convertê-lo para YAML alterando seu nome para application.yml e modificando seu conteúdo para:


spring:
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/clinica
        username: root
        password: root


Com YAML, a configuração se tornou mais legível, pois não contém prefixos repetidos. Além de legibilidade e redução de 
repetição, o uso de YAML facilita o armazenamento de variáveis de configuração de ambiente, conforme recomenda o 12
 Factor App, uma metodologia bastante conhecida e utilizada que define 12 boas práticas para criar uma aplicação
  moderna, escalável e de manutenção simples.

Mas afinal, qual formato usar?
Apesar dos benefícios que os arquivos YAML nos trazem em comparação ao arquivo properties, a decisão de escolher 
um ou outro é de gosto pessoal. Além disso, não é recomendável ter ao mesmo tempo os dois tipos de arquivo em um 
mesmo projeto, pois isso pode levar a problemas inesperados na aplicação.

Caso opte por utilizar YAML, fique atento, pois escrevê-lo no início pode ser um pouco trabalhoso devido às suas 
regras de indentação.


...Embeddable

package med.voll.api.endereco;

import jakarta.persistence.Embeddable;

@Embeddable
public class Endereco {
    private String logradouro;
    private String bairro;
    private String cep;
    private String numero;
    private String complemento;
    private String cidade;
    private String uf;


}



package med.voll.api.medico;

import jakarta.persistence.*;

import med.voll.api.endereco.Endereco;
@Table(name = "medicos")
@Entity(name = "medico")
public class Medico {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    private String nome;
    private String email;
    private String crm;

    @Enumerated(EnumType.STRING)
    private Especialidade especialidade;

    @Embedded                                        <<<Embedded
    private Endereco endereco;
}

...Interface = Repository

package med.voll.api.medico;

public interface MedicoRepository {
}



stopar ao mexer em db ou adicionar dependencias



mysql> use vollmed_api                                                        
Database changed
mysql> show tables;
+-----------------------+
| Tables_in_vollmed_api |
+-----------------------+
| flyway_schema_history |
| medicos               |
+-----------------------+
2 rows in set (0.01 sec)

mysql> desc medicos;
+---------------+--------------+------+-----+---------+----------------+
| Field         | Type         | Null | Key | Default | Extra          |
+---------------+--------------+------+-----+---------+----------------+
| id            | bigint       | NO   | PRI | NULL    | auto_increment |
| nome          | varchar(100) | NO   |     | NULL    |                |
| email         | varchar(100) | NO   | UNI | NULL    |                |
| crm           | varchar(6)   | NO   | UNI | NULL    |                |
| especialidade | varchar(100) | NO   |     | NULL    |                |
| logradouro    | varchar(100) | NO   |     | NULL    |                |
| bairro        | varchar(100) | NO   |     | NULL    |                |
| cep           | varchar(9)   | NO   |     | NULL    |                |
| complemento   | varchar(100) | YES  |     | NULL    |                |
| numero        | varchar(20)  | YES  |     | NULL    |                |
| uf            | char(2)      | NO   |     | NULL    |                |
| cidade        | varchar(100) | NO   |     | NULL    |                |
+---------------+--------------+------+-----+---------+----------------+
12 rows in set (0.01 sec)

 


 --- @RestController
@RequestMapping("medicos")
public class MedicoController {

    @Autowired
    private MedicoRepository repository;

    @PostMapping
    @Transactional                <-----spring
    public void cadastrar(@RequestBody DadosCadastroMedico dadosMedicos) {
        repository.save(new Medico(dadosMedicos));
    }

}


mysql> select * from medicos;
+----+------------------+---------------------------+--------+---------------+------------+--------+----------+-------------+--------+----+----------+
| id | nome             | email                     | crm    | especialidade | logradouro | bairro | cep      | complemento | numero | uf | cidade   |
+----+------------------+---------------------------+--------+---------------+------------+--------+----------+-------------+--------+----+----------+
|  1 | Rodrigo Ferreira | rodrigo.ferreira@voll.med | 123456 | ORTOPEDIA     | rua 1      | bairro | 12345678 | NULL        | 1      | DF | Brasilia |
+----+------------------+---------------------------+--------+---------------+------------+--------+----------+-------------+--------+----+----------+
1 row in set (0.00 sec)

mysql>


...BeanValidation


  @NotBlank nao é nulo nem vazio e para String

  NotNull Enum

  @Valid = validar DTO herdada

  ...Validando dados   @Valid




Você está trabalhando em um projeto que utiliza o Bean Validation, entretanto, as validações não estão sendo realizadas e as informações
 estão chegando ao banco de dados de maneira inválida.

Analise os seguintes trechos de códigos desse projeto:



@PostMapping
public void cadastrar(@RequestBody DadosCadastroProduto dados) {
    repository.save(new Produto(dados));
}COPIAR CÓDIGO
public record DadosCadastroProduto(
        @NotBlank String nome,
        @NotBlank String descricao,
        @NotNull @DecimalMin(“1.00”) BigDecimal preco
) {
}



Escolha a alternativa CORRETA que identifica o problema mencionado:


Faltou anotar o parâmetro dados, recebido no método cadastrar do Controller, com @Valid.
Sem essa anotação o Spring não vai disparar o processo de validação do Bean Validation.


------------------------/

...CORREÇÃO NON STOP MIGRATION

Para saber mais: Erro na migration


Conforme orientado ao longo dessa aula é importante sempre parar o projeto ao criar os arquivos de migrations, 
para evitar que o Flyway os execute antes da hora, com o código ainda incompleto, causando com isso problemas.

Entretanto, eventualmente pode acontecer de esquecermos de parar o projeto e algum erro acontecer ao tentar 
inicializar a aplicação. Nesse caso será exibido o seguinte erro ao tentar inicializar a aplicação:

Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: 
Error creating bean with name 'flywayInitializer' defined in class path resource [org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration$FlywayConfiguration.class]: Validate failed: Migrations have failed validationCOPIAR CÓDIGO
Perceba na mensagem de erro que é indicado que alguma migration falhou, impedindo assim que o projeto seja inicializado corretamente. 
Esse erro também pode acontecer se o código da migration estiver inválido, contendo algum trecho de SQL digitado de maneira incorreta.

Para resolver esse problema será necessário acessar o banco de dados da aplicação e executar o seguinte comando sql:

delete from flyway_schema_history where success = 0;

O comando anterior serve para apagar na tabela do Flyway todas as migrations cuja execução falhou. Após isso,
 basta corrigir o código da migration e executar novamente o projeto.

Obs: Pode acontecer de alguma migration ter criado uma tabela e/ou colunas e com isso o problema vai persistir, 
pois o flyway não vai apagar as tabelas/colunas criadas em migrations que falharam.
 Nesse caso você pode apagar o banco de dados e criá-lo novamente:

drop database vollmed_api;
create database vollmed_api;


------------------/

***

Nessa aula, você aprendeu como:
Adicionar novas dependências no projeto;
Mapear uma entidade JPA e criar uma interface Repository para ela;
Utilizar o Flyway como ferramenta de Migrations do projeto;
Realizar validações com Bean Validation utilizando algumas de suas anotações, como a @NotBlank.


<<<<<Não vai precisar do @Transactional, pois é um método de leitura, apenas carregando registros do banco de dados
não estamos salvando, atualizando nem excluindo informações do banco de dados, não precisa ter uma transação ativa.

...DTO


Para saber mais: DTOs ou entidades?



Estamos utilizando DTOs para representar os dados que recebemos e devolvemos pela API, mas você provavelmente deve estar se perguntando
 “Por que ao invés de criar um DTO não devolvemos diretamente a entidade JPA no Controller?”. Para fazer isso,
  bastaria alterar o método listar no Controller para:

@GetMapping
public List<Medico> listar() {
    return repository.findAll();
}

Desse jeito o código ficaria mais enxuto e não precisaríamos criar o DTO no projeto. Mas, será que isso realmente é uma boa ideia?

Os problemas de receber/devolver entidades JPA
De fato é muito mais simples e cômodo não utilizar DTOs e sim lidar diretamente com as entidades JPA nos controllers.
Porém, essa abordagem tem algumas desvantagens, inclusive causando vulnerabilidade na aplicação para
ataques do tipo Mass Assignment.

Um dos problemas consiste no fato de que, ao retornar uma entidade JPA em um método de um Controller, 
o Spring vai gerar o JSON contendo todos os atributos dela, sendo que nem sempre esse
é o comportamento que desejamos.

Eventualmente podemos ter atributos que não desejamos que sejam devolvidos no JSON, seja por motivos de segurança,
no caso de dados sensíveis, ou mesmo por não serem utilizados pelos clientes da API.

Utilização da anotação @JsonIgnore
Nessa situação, poderíamos utilizar a anotação @JsonIgnore, que nos ajuda a ignorar certas
propriedades de uma classe Java quando ela for serializada para um objeto JSON.

Sua utilização consiste em adicionar a anotação nos atributos que desejamos ignorar quando o JSON for gerado. Por exemplo, 
suponha que em um projeto exista uma entidade JPA Funcionario, na qual desejamos ignorar o atributo salario:

@Getter
@NoArgsConstructor
@EqualsAndHashCode(of = "id")
@Entity(name = "Funcionario")
@Table(name = "funcionarios")
public class Funcionario {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String email;

    @JsonIgnore
    private BigDecimal salario;

    //restante do código omitido…
}


No exemplo anterior, o atributo salario da classe Funcionario não será exibido nas respostas JSON e o problema estaria solucionado.

Entretanto, pode acontecer de existir algum outro endpoint da API na qual precisamos enviar no 
JSON o salário dos funcionários, sendo que nesse caso teríamos problemas, pois com a anotação
@JsonIgnore tal atributo nunca será enviado no JSON, e ao remover a anotação o atributo 
sempre será enviado. Perdemos, com isso, a flexibilidade de controlar quando determinados
atributos devem ser enviados no JSON e quando não.

DTO
O padrão DTO (Data Transfer Object) é um padrão de arquitetura que era bastante utilizado antigamente em aplicações 
Java distribuídas (arquitetura cliente/servidor) para representar os dados que eram enviados e recebidos entre
as aplicações cliente e servidor.

O padrão DTO pode (e deve) ser utilizado quando não queremos expor todos os atributos de alguma entidade do nosso projeto,
situação igual a dos salários dos funcionários mostrado no exemplo de código anterior. Além disso, com a flexibilidade 
e a opção de filtrar quais dados serão transmitidos, podemos poupar tempo de processamento.

Loop infinito causando StackOverflowError
Outro problema muito recorrente ao se trabalhar diretamente com entidades JPA acontece quando uma entidade possui
algum autorrelacionamento ou relacionamento bidirecional. Por exemplo, considere as seguintes entidades JPA:

@Getter
@NoArgsConstructor
@EqualsAndHashCode(of = "id")
@Entity(name = "Produto")
@Table(name = "produtos")
public class Produto {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String descricao;
    private BigDecimal preco;

    @ManyToOne
    @JoinColumn(name = “id_categoria”)
    private Categoria categoria;

    //restante do código omitido…
}



@Getter
@NoArgsConstructor
@EqualsAndHashCode(of = "id")
@Entity(name = "Categoria")
@Table(name = "categorias")
public class Categoria {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;

    @OneToMany(mappedBy = “categoria”)
    private List<Produto> produtos = new ArrayList<>();

    //restante do código omitido…
}
Ao retornar um objeto do tipo Produto no Controller, o Spring teria problemas para gerar o JSON desse objeto, causando 
uma exception do tipo StackOverflowError. Esse problema ocorre porque o objeto produto tem um atributo do tipo Categoria,
que por sua vez tem um atributo do tipo List<Produto>, causando assim um loop infinito no processo de serialização para JSON.

Tal problema pode ser resolvido com a utilização da anotação @JsonIgnore ou com a utilização das anotações @JsonBackReference
e @JsonManagedReference, mas também poderia ser evitado com a utilização de um DTO que representa apenas os dados que devem
 ser devolvidos no JSON.


Mass Assignment: Ruby on Rails, NodeJS.
Autobinding: Spring MVC, ASP NET MVC.
Object injection: PHP.


http://localhost:8080/medicos?size=1&page=1 

size=1&
page=1 

sort=nome
sort=nome&size=1&page=1


...Paginação

Para saber mais: parâmetros de paginação


Conforme aprendemos nos vídeos anteriores, por padrão, os parâmetros utilizados para realizar a paginação e a 
ordenação devem se chamar page, size e sort. Entretanto, o Spring Boot permite que os nomes 
de tais parâmetros sejam modificados via configuração no arquivo application.properties.

Por exemplo, poderíamos traduzir para português os nomes desses parâmetros com as seguintes propriedades:

spring.data.web.pageable.page-parameter=pagina
spring.data.web.pageable.size-parameter=tamanho
spring.data.web.sort.sort-parameter=ordem


Com isso, nas requisições que utilizam paginação, devemos utilizar esses nomes que foram definidos.
 Por exemplo, para listar os médicos de nossa API trazendo apenas 5 registros da página 2, 
 ordenados pelo e-mail e de maneira decrescente, a URL da requisição deve ser:

http://localhost:8080/medicos?tamanho=5&pagina=1&ordem=email,desc


---

...Paginação ex

Um colega de trabalho está tendo dificuldades em utilizar o recurso de
 paginação do Spring Boot e pediu sua ajuda.

Ao analisar a classe Controller que ele criou, você identificou o seguinte método:


@GetMapping
public void carregarProdutosCadastrados(Pageable paginacao) {
    repository.findAll().stream().map(DadosListagemProduto::new);
}


Quais problemas no código anterior você identifica? Selecione até duas alternativas.

r:

O parâmetro paginação não está sendo utilizado.
O parâmetro paginação foi declarado corretamente no método do Controller, entretanto, ele não foi utilizado na chamada ao método do repository.


O retorno do método está como void.
Para devolver as informações da API, o método não pode ter void como retorno.

DTO = 


package med.voll.api.medico;


public record DadosListagemMedico(String nome, String email, String crm, Especialidade especialidade) {

    public DadosListagemMedico(Medico medico) {
        this(medico.getNome(), medico.getEmail(), medico.getCrm(), medico.getEspecialidade());
    }
}


***

Nessa aula, você aprendeu como:
Utilizar a anotação @GetMapping para mapear métodos em Controllers que produzem dados;
Utilizar a interface Pageable do Spring para realizar consultas com paginação;
Controlar a paginação e a ordenação dos dados devolvidos pela API com os parâmetros page, size e sort;
Configurar o projeto para que os comandos SQL sejam exibidos no console.


EX: ja feito


Você precisará adicionar um novo método no Controller de paciente:

@GetMapping
public Page<DadosListagemPaciente> listar(@PageableDefault(page = 0, size = 10, sort = {"nome"}) Pageable paginacao) {
    return repository.findAll(paginacao).map(DadosListagemPaciente::new);
}


Também precisará criar o DTO DadosListagemPaciente:

public record DadosListagemPaciente(String nome, String email, String cpf) {
    public DadosListagemPaciente(Paciente paciente) {
        this(paciente.getNome(), paciente.getEmail(), paciente.getCpf());
    }
}



E, caso queira ver os comandos SQL disparados no banco de dados, vai precisar adicionar as seguintes propriedades no arquivo application.properties:

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true




...PATCH OU PUT

Para saber mais: PUT ou PATCH?


Escolher entre o método HTTP PUT ou PATCH é uma dúvida comum que surge quando estamos desenvolvendo APIs e precisamos criar 
um endpoint para atualização de recursos. Vamos entender as diferenças entre as duas opções e quando utilizar cada uma.

PUT
O método PUT substitui todos os atuais dados de um recurso pelos dados passados na requisição, ou seja, estamos falando 
de uma atualização integral. Então, com ele, fazemos a atualização total de um recurso em apenas uma requisição.


PATCH = ATT PARCIAL
O método PATCH, por sua vez, aplica modificações parciais em um recurso. Logo, é possível modificar apenas uma parte
 de um recurso. Com o PATCH, então, realizamos atualizações parciais, o que torna as opções de atualização mais flexíveis.

Qual escolher?
Na prática, é difícil saber qual método utilizar, pois nem sempre saberemos se um recurso será atualizado parcialmente 
ou totalmente em uma requisição - a não ser que realizemos uma verificação quanto a isso, algo que não é recomendado.

O mais comum então nas aplicações é utilizar o método PUT para requisições de atualização de recursos em uma API,
 sendo essa a nossa escolha no projeto utilizado ao longo deste curso.

 Exclusão lógica = torna inativo

 ...Parâmetros dinâmicos

 Parâmetros dinâmicos
PRÓXIMA ATIVIDADE

Você está trabalhando em uma aplicação com Spring Boot e se depara com o seguinte método:

@DeleteMapping(“/id”)
public void apagar(@PathVariable Long id) {
    repository.deleteById(id);
}

Considerando que a classe Controller a qual esse método pertence está anotada com @RequestMapping(“/produtos”), o que
 acontecerá se uma requisição DELETE for disparada para a API com a url /produtos/0?

 r:

 Ocorrerá um erro 404 - not found.


O parâmetro dinâmico id, adicionado na anotação @DeleteMapping, foi declarado sem estar entre chaves({}). Com isso, 
o Spring vai considerar que a URL para chamar esse método deve ser /produtos/id, ou seja, ele vai considerar
 que a palavra id faz parte da URL, e não que se trata de um parâmetro dinâmico.


 ***

Nessa aula, você aprendeu como:
Mapear requisições PUT com a anotação @PutMapping;
Escrever um código para atualizar informações de um registro no banco de dados;
Mapear requisições DELETE com a anotação @DeleteMapping;
Mapear parâmetros dinâmicos em URL com a anotação @PathVariable;
Implementar o conceito de exclusão lógica com o uso de um atributo booleano.

...URI


Header Location


Você se depara com o seguinte método, em uma classe Controller:

@PostMapping
@Transactional
public ResponseEntity cadastrar(@RequestBody @Valid DadosCadastroProduto dados) {
    var produto = new Produto(dados);
    repository.save(produto);

    var uri = new URI("/produtos/{id}");

    return ResponseEntity.ok(new DadosDetalhamentoProduto(produto));
}
Levando em consideração as boas práticas de retorno em uma requisição HTTP do tipo POST,
escolha as alternativas que indicam os problemas do código anterior:

r:
O cabeçalho Location será criado de maneira incorreta.

No código anterior, não foi utilizada a classe UriComponentsBuilder, do Spring, para a criação da URI; 
em vez disso, a URI foi criada manualmente e de maneira incorreta. Além disso,
a URI nem foi adicionada na resposta a ser devolvida pela API.


***

Nessa aula, você aprendeu como:
Utilizar a classe ResponseEntity, do Spring, para personalizar os retornos dos métodos de uma classe Controller;
Modificar o código HTTP devolvido nas respostas da API;
Adicionar cabeçalhos nas respostas da API;
Utilizar os códigos HTTP mais apropriados para cada operação realizada na API.


...Exceptions Spring


 Tratamento de exceptions


Em um projeto de uma API Rest com Spring Boot, o tratamento personalizado de Erro 404 não está sendo realizado
corretamente, apesar de existir a seguinte classe nesse projeto:



@RestController
public class ExceptionHandler {

    @ExceptionHandler(EntityNotFoundException.class)
    public void tratarErro404() {
    }

}


Por qual motivo o método tratarErro404 dessa classe não está sendo executado?


r:

    -.Errada.
O retorno do método foi declarado como void.
Embora o ideal seja devolver alguma informação, deixar o método sem retorno não impede que ele seja chamado pelo spring.


O retorno do método foi declarado como void.

A classe foi anotada de maneira incorreta.

    -.Correta.
Em APIs Rest, classes de tratamento de exceptions devem ser anotadas com 
o @RestControllerAdvice e não com o @RestController.


... Personalização de erro


 Para saber mais: personalizando mensagens de erro
PRÓXIMA ATIVIDADE

Você deve ter notado que o Bean Validation possui uma mensagem de erro para cada uma de suas anotações. Por exemplo, quando a validação falha em algum atributo anotado com @NotBlank, a mensagem de erro será: must not be blank.

Essas mensagens de erro não foram definidas na aplicação, pois são mensagens de erro padrão do próprio Bean Validation. Entretanto, caso você queira, pode personalizar tais mensagens.

Uma das maneiras de personalizar as mensagens de erro é adicionar o atributo message nas próprias anotações de validação:

public record DadosCadastroMedico(
    @NotBlank(message = "Nome é obrigatório")
    String nome,

    @NotBlank(message = "Email é obrigatório")
    @Email(message = "Formato do email é inválido")
    String email,

    @NotBlank(message = "Telefone é obrigatório")
    String telefone,

    @NotBlank(message = "CRM é obrigatório")
    @Pattern(regexp = "\\d{4,6}", message = "Formato do CRM é inválido")
    String crm,

    @NotNull(message = "Especialidade é obrigatória")
    Especialidade especialidade,

    @NotNull(message = "Dados do endereço são obrigatórios")
    @Valid DadosEndereco endereco) {}COPIAR CÓDIGO
Outra maneira é isolar as mensagens em um arquivo de propriedades, que deve possuir o nome ValidationMessages.properties e ser criado no diretório src/main/resources:

nome.obrigatorio=Nome é obrigatório
email.obrigatorio=Email é obrigatório
email.invalido=Formato do email é inválido
telefone.obrigatorio=Telefone é obrigatório
crm.obrigatorio=CRM é obrigatório
crm.invalido=Formato do CRM é inválido
especialidade.obrigatoria=Especialidade é obrigatória
endereco.obrigatorio=Dados do endereço são obrigatóriosCOPIAR CÓDIGO
E, nas anotações, indicar a chave das propriedades pelo próprio atributo message, delimitando com os caracteres { e }:

public record DadosCadastroMedico(
    @NotBlank(message = "{nome.obrigatorio}")
    String nome,

    @NotBlank(message = "{email.obrigatorio}")
    @Email(message = "{email.invalido}")
    String email,

    @NotBlank(message = "{telefone.obrigatorio}")
    String telefone,

    @NotBlank(message = "{crm.obrigatorio}")
    @Pattern(regexp = "\\d{4,6}", message = "{crm.invalido}")
    String crm,

    @NotNull(message = "{especialidade.obrigatoria}")
    Especialidade especialidade,

    @NotNull(message = "{endereco.obrigatorio}")
    @Valid DadosEndereco endereco) {}



    ***


Nessa aula, você aprendeu como:
Criar uma classe para isolar o tratamento de exceptions da API, com a utilização da anotação @RestControllerAdvice;
Utilizar a anotação @ExceptionHandler, do Spring, para indicar qual exception um determinado método da classe de tratamento de erros deve capturar;
Tratar erros do tipo 404 (Not Found) na classe de tratamento de erros;
Tratar erros do tipo 400 (Bad Request), para erros de validação do Bean Validation, na classe de tratamento de erros;
Simplificar o JSON devolvido pela API em casos de erro de validação do Bean Validation.


stateless nao fala se o usuário esta logado, nao guarda estado.
Cada requisição tivesse que logar o usuário novamente

Para nao precisar enviar usuario e senha para cada requisição, é usado o token
para recuperar as informações
json web token


Existem diversas formas de se realizar o processo de autenticação e autorização em aplicações Web e APIs Rest, sendo que no curso utilizaremos Tokens JWT.

Você pode conferir as principais formas de autenticação lendo este artigo: Tipos de autenticação.
https://www.alura.com.br/artigos/tipos-de-autenticacao?_gl=1*dtwyf*_ga*MzE2NDUyMDgxLjE2OTYwMTAzMzk.*_ga_1EPWSW3PCS*MTY5NjE3NjIzNS42MC4xLjE2OTYxODI1NzAuMC4wLjA.*_fplc*amIlMkJzWWRqYSUyRmRaR0hBYjhZOU13alRNaVNlaWhNeEVSWVg5cW8ybHRNOTJzUUpIWWRCUnBpczd6ZSUyQmdGaiUyQjI1bkt4TmR4YmlHNUVQM0JIQjV6WDBXVktlNTF4VzZCbnFIREtjeG5BMnVSQ1doR2dJYWZZYUlOMGtDa014Y2clM0QlM0Q.


Autenticação por sessão
Este foi um dos primeiros métodos de autenticação, criado no início do desenvolvimento das aplicações web. Muito empregado até hoje, 
neste modelo o usuário pode se autenticar com usuário e senha ou por algum outro método.

O servidor, por sua vez, cria uma sessão em sua memória ou banco e devolve a informação de usuário através
de um cookie com o identificador da sessão criada.

Na próxima requisição, é passado o identificador da sessão e o servidor devolve o acesso ao recurso solicitado 
ou realiza algum outro tipo de manipulação referente à conta autenticada.



Autenticação por token
Neste método, após ter um login e senha validados pelo servidor, será criado um token que o usuário receberá em resposta e que
permitirá o acesso a algum recurso. O padrão adotado por grande número das aplicações web hoje é o formato
JWT (JSON Web Token) e ele fará com que o token seja assinado da forma correta para haver a autenticação 
da requisição a um recurso no servidor.



É importante salientar que informações do usuário não ficarão salvas no servidor. Elas são gravadas no token, que tem um período
 geralmente curto para expiração, por volta de 10 minutos. O tempo dependerá dos requisitos de segurança da aplicação.

Se um token chegar a expirar, uma solução seria pedir ao servidor um novo token válido. Isso acarretaria um novo
processo de autenticação por login e senha ou por outro método escolhido. Porém, não é prático que a 
aplicação solicite usuário e senha novamente a cada expiração. Uma estratégia para lidar com essa
situação seria usar refresh token.

Como uma solução comum, costuma-se enviar tanto o token de acesso quanto o refresh token, assim que
a autenticação na aplicação é realizada. No entanto, o refresh token possui um tempo maior
para a expiração, e neste caso não armazenamos nenhuma informação de usuário.

Outra característica do refresh token é que ele é de uso único, então na próxima 
solicitação é enviado um token e um novo refresh token.

Autenticando por sessão versus token JWT
Apresentadas as características destes dois métodos vamos ver agora uma comparação entre eles.

Na autenticação por sessão, o estado da sessão é mantido pelo servidor com as informações do usuário, 
podendo ser armazenado em um banco de dados ou na memória (Stateful). Com essa estratégia, podemos
nos deparar com problemas como limites de hardware. Um consumo excessivo de memória pode causar
até o travamento da máquina, dada a quantidade de chamadas para o garbage collector.

Quando utilizamos autenticação por Token JWT, o cenário muda um pouco, já que as informações não
são mais mantidas no servidor (Stateless), e sim no token, na máquina do cliente. O token 
carregará todas as informações necessárias para a autenticação, como a identificação do
usuário, assinatura, data de expiração e até o método de autenticação utilizado.

Mas de maneira prática, como diferenciar os dois modelos de autenticação? A princípio são
bem similares. O que vai diferenciá-los de maneira mais efetiva será guardar ou não o
estado no servidor (stateless/stateful) o que irá impactar na forma de implementar
escalabilidade, para que nosso sistema lide com uma carga maior de trabalho.


---escalabilidade

No tempo de vida de uma aplicação de qualquer tipo é muito comum que ela comece a demandar mais recursos para sua operação.

Esse crescimento deve ser ordenado e suportado de maneira a não afetar a utilização do sistema, o que chamamos de escalabilidade.

A implementação de segurança através de um dos métodos de autenticação traz alguns desafios à escalabilidade da aplicação. 
Se optarmos por usar sessões, o controle tende a ficar complexo, pois o estado pode estar espalhado por diversos 
servidores e/ou instâncias.

Neste contexto, é comum haver a figura do balanceador de carga (load balance), responsável por distribuir a carga de 
requisições aos recursos entre os demais servidores que mantém a aplicação.

No caso da autenticação por sessão, como podemos garantir que a sessão correta será devolvida para o cliente? Trabalhar 
com o conceito de Sticky Session pode ser útil, já que em cenários com load balance, esta técnica vincula uma sessão
 de usuário a um servidor/instância específico.

Escalar uma aplicação é muito importante e devemos usar métodos de autenticação que atendam a esse requisito, garantindo
 assim maior segurança na utilização de sistemas por nossos usuários.

Conclusão
Independentemente do método a ser adotado, o importante é que ao projetar uma solução de software o desenvolvedor “fique ligado” 
na implementação de métodos de autenticação que possibilitem a escalabilidade da aplicação com o menor transtorno, 
além de uma manutenção sem estresse.

Para aprender mais sobre autenticação e segurança, veja:

Podcast sobre Segurança
O que é Json Web Token (JWT)?
Curso Node.js e JWT: autenticação com tokens na Alura
Curso Autenticação mais segura com 2 fatores na Alura

------hash



Hashing nada mais é do que uma função matemática que converte um texto em outro texto totalmente diferente e de difícil dedução.

Por exemplo, o texto Meu nome é Rodrigo pode ser convertido para o texto 8132f7cb860e9ce4c1d9062d2a5d1848, utilizando 
o algoritmo de hashing MD5.

Um detalhe importante é que os algoritmos de hashing devem ser de mão única, ou seja, não deve ser possível obter o texto original 

a partir de um hash. Dessa forma, para saber se um usuário digitou a senha correta ao tentar se autenticar em uma aplicação,
devemos pegar a senha que foi digitada por ele e gerar o hash dela, para então realizar a comparação com o hash que está armazenado no banco de dados.

Existem diversos algoritmos de hashing que podem ser utilizados para fazer essa transformação nas senhas dos usuários, sendo que

alguns são mais antigos e não mais considerados seguros hoje em dia, como o MD5 e o SHA1. Os principais algoritmos recomendados
atualmente são:

Bcrypt
Scrypt
Argon2
PBKDF2

Ao longo do curso utilizaremos o algoritmo BCrypt, que é bastante popular atualmente. Essa opção também leva em consideração o

fato de que o Spring Security já nos fornece uma classe que o implementa.

...Spring Data

Para saber mais: documentação Spring Data


Conforme aprendido em vídeos anteriores, o Spring Data utiliza um padrão próprio de nomenclatura de métodos que devemos 
seguir para que ele consiga gerar as queries SQL de maneira correta.

Existem algumas palavras reservadas que devemos utilizar nos nomes dos métodos, como o findBy e o existsBy, para indicar
ao Spring Data como ele deve montar a consulta que desejamos. Esse recurso é bastante flexível, podendo ser
um pouco complexo devido às diversas possibilidades existentes.

Para conhecer mais detalhes e entender melhor como montar consultas dinâmicas com o Spring Data, 
acesse a sua documentação oficial.
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/

...


Mudanças na versão 3.1
PRÓXIMA ATIVIDADE

ATENÇÃO!

A partir da versão 3.1 do Spring Boot algumas mudanças foram realizadas, em relação às configurações de segurança. 
Caso você esteja utilizando o Spring Boot nessa versão, ou em versões posteriores, o código demonstrado
 no vídeo anterior vai apresentar um aviso de deprecated, por conta de tais mudanças.

A partir dessa versão, o método securityFilterChain deve ser alterado para:

@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    return http.csrf(csrf -> csrf.disable())
            .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .build();
}


...Bean

Classe de configurações
PRÓXIMA ATIVIDADE

Um colega de trabalho pede sua ajuda para identificar um problema em seu código, referente a uma classe de configurações do Spring Security:

@Configuration
@EnableWebSecurity
public class SecurityConfigurations {

    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http.csrf().disable()
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and().build();
    }

}


Ele afirma que mesmo após criar essa classe, o Spring Security ainda está bloqueando todas as requisições que chegam na API, devolvendo o código HTTP 401 (Unauthorized).
Analise o código anterior e escolha a opção que indica o que está causando esse problema.

r:

O método securityFilterChain deveria ter sido anotado com @Bean.
Sem essa anotação no método, o objeto SecurityFilterChain não será exposto como um bean para o Spring.

@Bean Serve para exportar uma classe para o Spring, fazendo com que ele
consiga carregala e realize a sua injeção de dependência em outras classes.



JSON Web Token, ou JWT, é um padrão utilizado para a geração de 
tokens, que nada mais são do que Strings, representando, de maneira
 segura, informações que serão compartilhadas entre dois sistemas. 
 Você pode conhecer melhor sobre esse padrão em seu site oficial.

Aqui na Alura temos o artigo O que é JSON Web Tokens? e o Alura+ O
que é Json Web Token (JWT)?, que também explicam o funcionamento
do padrão JWT.


https://jwt.io/introduction

https://www.alura.com.br/artigos/o-que-e-json-web-tokens?_gl=1*vyfmvj*_ga*MzE2NDUyMDgxLjE2OTYwMTAzMzk.*_ga_1EPWSW3PCS*MTY5NjI2NjgwMC42NS4xLjE2OTYyNjc0NjcuMC4wLjA.*_fplc*WDNLQ2doRW12UDhWRnBWZ3d6amlwcWZ4TVp4SXVtTGdNeWxyNnJWTDFJZXVpdlJLTjdTJTJCN1c3MWJSZGJKejBsa2lYZGlUQnlQTjZMQVBPdkprNCUyQlJ4RVUzVyUyQnY4Ullwekw2NWZBMmlDOGZOS21ZaGtXVXNwRzhMZWZWd2t3JTNEJTNE


...withClaim()

Para saber mais: Outras informações no token

Além do Issuer, Subject e data de expiração, podemos incluir outras informações no token JWT, de acordo com as necessidades da aplicação.
 Por exemplo, podemos incluir o id do usuário no token, para isso basta utilizar o método withClaim:

return JWT.create()
    .withIssuer("API Voll.med")
    .withSubject(usuario.getLogin())

    .withClaim("id", usuario.getId())

    .withExpiresAt(dataExpiracao())
    .sign(algoritmo);


O método withClaim recebe dois parâmetros, sendo o primeiro uma String que identifica o nome do claim (propriedade armazenada no token),
e o segundo a informação que se deseja armazenar.

...injeção


 Injeção de propriedades


Vimos ao longo dessa aula que podemos injetar uma propriedade declarada no arquivo application.properties
 em uma classe gerenciada pelo Spring, com a utilização da anotação @Value.

Supondo que o arquivo application.properties tenha a seguinte propriedade declarada:

app.teste=true

Qual das opções a seguir indica a maneira CORRETA de injetá-la em um atributo de uma classe gerenciada pelo Spring?

r:
Alternativa correta
@Value("${app.teste}")
Esse é o jeito correto de utilizar a anotação @Value.

***

Nessa aula, você aprendeu como:
Adicionar a biblioteca Auth0 java-jwt como dependência do projeto;
Utilizar essa biblioteca para realizar a geração de um token na API;
Injetar uma propriedade do arquivo application.properties em uma classe gerenciada pelo Spring, utilizando a anotação @Value;
Devolver um token gerado na API quando um usuário se autenticar nela.


